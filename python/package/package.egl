[%
	
	var package : Package := Package.allInstances().at(0);
	var s : OrderedSet := package.node;
	
	var chmodTool = new Native("org.best_of_robotics.transform.ros.to.cplusplus.tools.CHModTool");
	var configTool = new Native("org.best_of_robotics.transform.ros.to.cplusplus.tools.ConfigFileCreator");

	//node
	for(node in package.node) {
		//var nodeHeaderTemplate := TemplateFactory.load('nodeHeader.egl');
		var sourceTemplate := TemplateFactory.load('nodeSource.egl');
		var startTemplate := TemplateFactory.load('start.egl');
		
		sourceTemplate.populate('node', node);
		sourceTemplate.populate('package', package);
		sourceTemplate.generate('src/' + node.name + '.py');
		
		startTemplate.generate('src/' + node.name);
		chmodTool.setName(node.name);
		chmodTool.setDirectory(TemplateFactory.getOutputRoot());
		chmodTool.chmod2("a+x"); // makes executable
		
		
		//dynamic_reconfigure
		var configureTemplate := TemplateFactory.load('configure.egl');
		configureTemplate.populate('node', node);
		configureTemplate.populate('package', package);
		configureTemplate.generate('cfg/'+ node.name +'.cfg');
		
		chmodTool.setName(node.name);
		chmodTool.setDirectory(TemplateFactory.getOutputRoot());
		chmodTool.chmod("a+x"); // makes executable
		
		//test_generation
 		for(action in node.actionserver) {
 			configTool.setDirectory(TemplateFactory.getOutputRoot() + "/test/");
 			configTool.write('testdata_'+ node.name + '_' + action.name + '.yaml', action.ActionType.replace('::','/').toString()+"Goal"); 
 			var testActionTemplate := TemplateFactory.load('test_actionclient.egl');
 			testActionTemplate.populate('node', node);
 			testActionTemplate.populate('action', action);
 			testActionTemplate.populate('package', package);
 			testActionTemplate.generate('test/test_'+ node.name + '_' + action.name + '.py');
 		}
		
	}
	
	
	
	//CMakeList
	var cmakeListsTemplate := TemplateFactory.load('cmakelists.egl');
	cmakeListsTemplate.populate('package', package);
	cmakeListsTemplate.generate('CMakeLists.txt');
	
	//package.xml
	var manifestTemplate := TemplateFactory.load('package_xml.egl');
	manifestTemplate.populate('package', package);
	manifestTemplate.generate('package.xml');

	//setup.py
	var setupTemplate := TemplateFactory.load('setup_py.egl');
	setupTemplate.populate('package', package);
	setupTemplate.generate('setup.py');

	//README.md
	var readmeTemplate := TemplateFactory.load('readme.egl');
	readmeTemplate.populate('package', package);
	readmeTemplate.generate('README.md');

	
%]